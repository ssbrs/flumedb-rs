(function() {var implementors = {};
implementors["flumedb"] = [{"text":"impl RefUnwindSafe for StreamOpts","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlumeLogError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GoOffsetLog","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GoOffsetLogIter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GoFlumeOffsetLogError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemLog","synthetic":true,"types":[]},{"text":"impl&lt;ByteType&gt; RefUnwindSafe for OffsetLog&lt;ByteType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ByteType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadResult","synthetic":true,"types":[]},{"text":"impl&lt;ByteType&gt; RefUnwindSafe for OffsetLogIter&lt;ByteType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ByteType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlumeOffsetLogError","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()