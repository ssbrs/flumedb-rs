var searchIndex = JSON.parse('{\
"flumedb":{"doc":"flumedb","i":[[0,"flume_log","flumedb","",null,null],[3,"Error","flumedb::flume_log","The `Error` type, which can contain any failure.",null,null],[3,"StreamOpts","","",null,null],[12,"lt","","",0,null],[12,"gt","","",0,null],[12,"reverse","","",0,null],[12,"live","","",0,null],[12,"limit","","",0,null],[4,"FlumeLogError","","",null,null],[13,"SequenceNotFound","","",1,null],[12,"sequence","flumedb::flume_log::FlumeLogError","",2,null],[6,"Sequence","flumedb::flume_log","",null,null],[8,"FlumeLog","","",null,null],[10,"get","","",3,[[["sequence",6]],[["result",4],["error",3],["vec",3]]]],[10,"clear","","",3,[[["sequence",6]]]],[10,"latest","","",3,[[],[["option",4],["sequence",6]]]],[10,"append","","",3,[[],[["sequence",6],["error",3],["result",4]]]],[0,"flume_view","flumedb","",null,null],[8,"FlumeView","flumedb::flume_view","",null,null],[10,"append","","",4,[[["sequence",6]]]],[10,"latest","","",4,[[],["sequence",6]]],[0,"go_offset_log","flumedb","",null,null],[8,"BidirIterator","flumedb::go_offset_log","",null,null],[16,"Item","","",5,null],[10,"next","","",5,[[],["option",4]]],[10,"prev","","Examples ``` use bidir_iter::*;",5,[[],["option",4]]],[11,"forward","","Create a forward-moving Iterator, starting at the current…",5,[[],["forward",3]]],[11,"forward_owned","","Create a forward-moving Iterator, starting at the current…",5,[[],["forward",3]]],[11,"backward","","Create a backward-moving Iterator, starting at the current…",5,[[],["backward",3]]],[11,"backward_owned","","Create a backward-moving Iterator, starting at the current…",5,[[],["backward",3]]],[11,"filter","","Examples ``` use bidir_iter::*;",5,[[],["filter",3]]],[11,"map","","Examples ``` use bidir_iter::*;",5,[[],["map",3]]],[11,"filter_map","","Examples ``` use bidir_iter::*;",5,[[],["filtermap",3]]],[3,"GoOffsetLog","","",null,null],[12,"data_file","","",6,null],[3,"Frame","","",null,null],[12,"data_size","","",7,null],[12,"offset","","",7,null],[3,"ReadResult","","",null,null],[12,"entry","","",8,null],[12,"next","","",8,null],[3,"GoOffsetLogIter","","",null,null],[4,"GoFlumeOffsetLogError","","",null,null],[13,"CorruptLogFile","","",9,null],[13,"CorruptJournalFile","","",9,null],[13,"CorruptOffsetFile","","",9,null],[13,"UnsupportedMessageType","","",9,null],[13,"DecodeBufferSizeTooSmall","","",9,null],[5,"read_next","","",null,[[],[["error",3],["result",4],["readresult",3]]]],[5,"read_next_mut","","",null,[[],[["error",3],["result",4],["readresult",3]]]],[11,"new","","Where path is a path to the directory that contains go log…",6,[[["asref",8],["path",3]],[["result",4],["gooffsetlog",3],["error",3]]]],[11,"open_read_only","","Where path is a path to the directory that contains go log…",6,[[["asref",8],["path",3]],[["result",4],["gooffsetlog",3],["error",3]]]],[11,"from_files","","",6,[[["file",3]],[["result",4],["gooffsetlog",3],["error",3]]]],[11,"end","","",6,[[]]],[11,"read","","",6,[[],[["error",3],["result",4],["readresult",3]]]],[11,"append_batch","","",6,[[],[["error",3],["result",4],["vec",3]]]],[11,"iter","","",6,[[],["gooffsetlogiter",3]]],[11,"new","","",10,[[["file",3]],["gooffsetlogiter",3]]],[11,"with_starting_offset","","",10,[[["file",3]],["gooffsetlogiter",3]]],[0,"iter_at_offset","flumedb","",null,null],[8,"IterAtOffset","flumedb::iter_at_offset","",null,null],[10,"iter_at_offset","","",11,[[]]],[0,"log_entry","flumedb","",null,null],[3,"LogEntry","flumedb::log_entry","",null,null],[12,"offset","","",12,null],[12,"data","","",12,null],[0,"mem_log","flumedb","",null,null],[3,"MemLog","flumedb::mem_log","",null,null],[11,"new","","",13,[[],["memlog",3]]],[0,"offset_log","flumedb","",null,null],[8,"BidirIterator","flumedb::offset_log","",null,null],[16,"Item","","",5,null],[10,"next","","",5,[[],["option",4]]],[10,"prev","","Examples ``` use bidir_iter::*;",5,[[],["option",4]]],[11,"forward","","Create a forward-moving Iterator, starting at the current…",5,[[],["forward",3]]],[11,"forward_owned","","Create a forward-moving Iterator, starting at the current…",5,[[],["forward",3]]],[11,"backward","","Create a backward-moving Iterator, starting at the current…",5,[[],["backward",3]]],[11,"backward_owned","","Create a backward-moving Iterator, starting at the current…",5,[[],["backward",3]]],[11,"filter","","Examples ``` use bidir_iter::*;",5,[[],["filter",3]]],[11,"map","","Examples ``` use bidir_iter::*;",5,[[],["map",3]]],[11,"filter_map","","Examples ``` use bidir_iter::*;",5,[[],["filtermap",3]]],[3,"Forward","","",null,null],[3,"OffsetLog","","",null,null],[12,"file","","",14,null],[3,"Frame","","",null,null],[12,"offset","","",15,null],[12,"data_size","","",15,null],[3,"ReadResult","","",null,null],[12,"entry","","",16,null],[12,"next","","",16,null],[3,"OffsetLogIter","","",null,null],[4,"FlumeOffsetLogError","","",null,null],[13,"CorruptLogFile","","",17,null],[13,"DecodeBufferSizeTooSmall","","",17,null],[5,"encode","","",null,[[["bytesmut",3]],[["error",3],["result",4]]]],[5,"validate_entry","","",null,[[],[["error",3],["result",4]]]],[5,"read_next","","",null,[[],[["result",4],["readresult",3],["error",3]]]],[5,"read_next_mut","","",null,[[],[["result",4],["readresult",3],["error",3]]]],[5,"read_prev","","",null,[[],[["result",4],["readresult",3],["error",3]]]],[5,"read_prev_mut","","",null,[[],[["result",4],["readresult",3],["error",3]]]],[11,"new","","",14,[[["asref",8],["path",3]],[["result",4],["offsetlog",3],["error",3]]]],[11,"open_read_only","","",14,[[["asref",8],["path",3]],[["result",4],["offsetlog",3],["error",3]]]],[11,"from_file","","",14,[[["file",3]],[["result",4],["offsetlog",3],["error",3]]]],[11,"end","","",14,[[]]],[11,"read","","",14,[[],[["result",4],["readresult",3],["error",3]]]],[11,"append_batch","","",14,[[],[["error",3],["result",4],["vec",3]]]],[11,"iter","","",14,[[],[["forward",3],["offsetlogiter",3]]]],[11,"bidir_iter","","",14,[[],["offsetlogiter",3]]],[11,"bidir_iter_at_offset","","",14,[[],["offsetlogiter",3]]],[11,"new","","",18,[[["file",3]],["offsetlogiter",3]]],[11,"with_starting_offset","","",18,[[["file",3]],["offsetlogiter",3]]],[11,"from","flumedb::flume_log","",19,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_string","","",19,[[],["string",3]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"as_fail","","",19,[[],["fail",8]]],[11,"vzip","","",19,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"as_fail","","",1,[[],["fail",8]]],[11,"vzip","","",1,[[]]],[11,"from","flumedb::go_offset_log","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into_iter","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"as_fail","","",9,[[],["fail",8]]],[11,"vzip","","",9,[[]]],[11,"from","flumedb::log_entry","",12,[[]]],[11,"into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","flumedb::mem_log","",13,[[]]],[11,"into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","flumedb::offset_log","",20,[[]]],[11,"into","","",20,[[]]],[11,"into_iter","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_string","","",17,[[],["string",3]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"as_fail","","",17,[[],["fail",8]]],[11,"vzip","","",17,[[]]],[11,"next","","",20,[[],["option",4]]],[11,"as_fail","flumedb::flume_log","",19,[[],["fail",8]]],[11,"fmt","","",19,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",19,[[["formatter",3]],[["error",3],["result",4]]]],[11,"from","","",19,[[],["error",3]]],[11,"as_ref","","",19,[[],["fail",8]]],[11,"get","flumedb::mem_log","",13,[[],[["result",4],["error",3],["vec",3]]]],[11,"clear","","",13,[[]]],[11,"latest","","",13,[[],["option",4]]],[11,"append","","",13,[[],[["error",3],["result",4]]]],[11,"get","flumedb::offset_log","",14,[[],[["result",4],["error",3],["vec",3]]]],[11,"latest","","",14,[[],["option",4]]],[11,"append","","",14,[[],[["error",3],["result",4]]]],[11,"clear","","",14,[[]]],[11,"iter_at_offset","flumedb::go_offset_log","",6,[[],["gooffsetlogiter",3]]],[11,"iter_at_offset","flumedb::offset_log","",14,[[],[["forward",3],["offsetlogiter",3]]]],[11,"next","flumedb::go_offset_log","",10,[[],["option",4]]],[11,"fmt","flumedb::flume_log","",1,[[["formatter",3]],["result",6]]],[11,"fmt","flumedb::go_offset_log","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","flumedb::log_entry","",12,[[["formatter",3]],["result",6]]],[11,"fmt","flumedb::offset_log","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","flumedb::flume_log","",1,[[["formatter",3]],["result",6]]],[11,"fmt","flumedb::go_offset_log","",9,[[["formatter",3]],["result",6]]],[11,"fmt","flumedb::offset_log","",17,[[["formatter",3]],["result",6]]],[11,"next","","",18,[[],["option",4]]],[11,"prev","","",18,[[],["option",4]]],[11,"name","flumedb::flume_log","",1,[[],["option",4]]],[11,"cause","","",1,[[],[["option",4],["fail",8]]]],[11,"backtrace","","",1,[[],[["option",4],["backtrace",3]]]],[11,"name","flumedb::go_offset_log","",9,[[],["option",4]]],[11,"cause","","",9,[[],[["option",4],["fail",8]]]],[11,"backtrace","","",9,[[],[["option",4],["backtrace",3]]]],[11,"name","flumedb::offset_log","",17,[[],["option",4]]],[11,"cause","","",17,[[],[["option",4],["fail",8]]]],[11,"backtrace","","",17,[[],[["option",4],["backtrace",3]]]],[11,"from_boxed_compat","flumedb::flume_log","Creates an `Error` from `Box<std::error::Error>`.",19,[[["box",3],["error",8]],["error",3]]],[11,"as_fail","","Return a reference to the underlying failure that this…",19,[[],["fail",8]]],[11,"name","","Returns the name of the underlying fail.",19,[[],["option",4]]],[11,"cause","","Returns a reference to the underlying cause of this…",19,[[],["fail",8]]],[11,"backtrace","","Gets a reference to the `Backtrace` for this `Error`.",19,[[],["backtrace",3]]],[11,"context","","Provides context for this `Error`.",19,[[],["context",3]]],[11,"compat","","Wraps `Error` in a compatibility type.",19,[[],[["error",3],["compat",3]]]],[11,"downcast","","Attempts to downcast this `Error` to a particular `Fail`…",19,[[],[["error",3],["result",4]]]],[11,"find_root_cause","","Returns the \\\"root cause\\\" of this error - the last value in…",19,[[],["fail",8]]],[11,"iter_causes","","Returns a iterator over the causes of this error with the…",19,[[],["causes",3]]],[11,"iter_chain","","Returns a iterator over all fails up the chain from the…",19,[[],["causes",3]]],[11,"downcast_ref","","Attempts to downcast this `Error` to a particular `Fail`…",19,[[],["option",4]]],[11,"downcast_mut","","Attempts to downcast this `Error` to a particular `Fail`…",19,[[],["option",4]]],[11,"root_cause","","Deprecated alias to `find_root_cause`.",19,[[],["fail",8]]],[11,"causes","","Deprecated alias to `iter_causes`.",19,[[],["causes",3]]]],"p":[[3,"StreamOpts"],[4,"FlumeLogError"],[13,"SequenceNotFound"],[8,"FlumeLog"],[8,"FlumeView"],[8,"BidirIterator"],[3,"GoOffsetLog"],[3,"Frame"],[3,"ReadResult"],[4,"GoFlumeOffsetLogError"],[3,"GoOffsetLogIter"],[8,"IterAtOffset"],[3,"LogEntry"],[3,"MemLog"],[3,"OffsetLog"],[3,"Frame"],[3,"ReadResult"],[4,"FlumeOffsetLogError"],[3,"OffsetLogIter"],[3,"Error"],[3,"Forward"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);